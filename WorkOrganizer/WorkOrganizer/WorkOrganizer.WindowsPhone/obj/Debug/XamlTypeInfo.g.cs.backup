//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace WorkOrganizer
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[27];
            _typeNameTable[0] = "WorkOrganizer.ConfigsPage";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "String";
            _typeNameTable[4] = "WorkOrganizer.HouseManagementPage";
            _typeNameTable[5] = "WorkOrganizer.HousePage";
            _typeNameTable[6] = "System.Collections.ObjectModel.ObservableCollection`1<WorkOrganizer.Specs.Owner>";
            _typeNameTable[7] = "System.Collections.ObjectModel.Collection`1<WorkOrganizer.Specs.Owner>";
            _typeNameTable[8] = "Object";
            _typeNameTable[9] = "WorkOrganizer.Specs.Owner";
            _typeNameTable[10] = "Int32";
            _typeNameTable[11] = "Boolean";
            _typeNameTable[12] = "WorkOrganizer.Specs.House";
            _typeNameTable[13] = "WorkOrganizer.MainPage";
            _typeNameTable[14] = "WorkOrganizer.OwnerManagementPage";
            _typeNameTable[15] = "WorkOrganizer.OwnerPage";
            _typeNameTable[16] = "WorkOrganizer.SummaryPage";
            _typeNameTable[17] = "System.DateTime";
            _typeNameTable[18] = "System.ValueType";
            _typeNameTable[19] = "WorkOrganizer.WorkAnalyzerPage";
            _typeNameTable[20] = "WorkOrganizer.WorkEventPage";
            _typeNameTable[21] = "WorkOrganizer.Specs.WorkEvent";
            _typeNameTable[22] = "System.Collections.ObjectModel.ObservableCollection`1<WorkOrganizer.Specs.House>";
            _typeNameTable[23] = "System.Collections.ObjectModel.Collection`1<WorkOrganizer.Specs.House>";
            _typeNameTable[24] = "System.Collections.ObjectModel.ObservableCollection`1<WorkOrganizer.ComboData>";
            _typeNameTable[25] = "System.Collections.ObjectModel.Collection`1<WorkOrganizer.ComboData>";
            _typeNameTable[26] = "WorkOrganizer.ComboData";

            _typeTable = new global::System.Type[27];
            _typeTable[0] = typeof(global::WorkOrganizer.ConfigsPage);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::System.String);
            _typeTable[4] = typeof(global::WorkOrganizer.HouseManagementPage);
            _typeTable[5] = typeof(global::WorkOrganizer.HousePage);
            _typeTable[6] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::WorkOrganizer.Specs.Owner>);
            _typeTable[7] = typeof(global::System.Collections.ObjectModel.Collection<global::WorkOrganizer.Specs.Owner>);
            _typeTable[8] = typeof(global::System.Object);
            _typeTable[9] = typeof(global::WorkOrganizer.Specs.Owner);
            _typeTable[10] = typeof(global::System.Int32);
            _typeTable[11] = typeof(global::System.Boolean);
            _typeTable[12] = typeof(global::WorkOrganizer.Specs.House);
            _typeTable[13] = typeof(global::WorkOrganizer.MainPage);
            _typeTable[14] = typeof(global::WorkOrganizer.OwnerManagementPage);
            _typeTable[15] = typeof(global::WorkOrganizer.OwnerPage);
            _typeTable[16] = typeof(global::WorkOrganizer.SummaryPage);
            _typeTable[17] = typeof(global::System.DateTime);
            _typeTable[18] = typeof(global::System.ValueType);
            _typeTable[19] = typeof(global::WorkOrganizer.WorkAnalyzerPage);
            _typeTable[20] = typeof(global::WorkOrganizer.WorkEventPage);
            _typeTable[21] = typeof(global::WorkOrganizer.Specs.WorkEvent);
            _typeTable[22] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::WorkOrganizer.Specs.House>);
            _typeTable[23] = typeof(global::System.Collections.ObjectModel.Collection<global::WorkOrganizer.Specs.House>);
            _typeTable[24] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::WorkOrganizer.ComboData>);
            _typeTable[25] = typeof(global::System.Collections.ObjectModel.Collection<global::WorkOrganizer.ComboData>);
            _typeTable[26] = typeof(global::WorkOrganizer.ComboData);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ConfigsPage() { return new global::WorkOrganizer.ConfigsPage(); }
        private object Activate_4_HouseManagementPage() { return new global::WorkOrganizer.HouseManagementPage(); }
        private object Activate_5_HousePage() { return new global::WorkOrganizer.HousePage(); }
        private object Activate_6_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::WorkOrganizer.Specs.Owner>(); }
        private object Activate_7_Collection() { return new global::System.Collections.ObjectModel.Collection<global::WorkOrganizer.Specs.Owner>(); }
        private object Activate_13_MainPage() { return new global::WorkOrganizer.MainPage(); }
        private object Activate_14_OwnerManagementPage() { return new global::WorkOrganizer.OwnerManagementPage(); }
        private object Activate_15_OwnerPage() { return new global::WorkOrganizer.OwnerPage(); }
        private object Activate_16_SummaryPage() { return new global::WorkOrganizer.SummaryPage(); }
        private object Activate_19_WorkAnalyzerPage() { return new global::WorkOrganizer.WorkAnalyzerPage(); }
        private object Activate_20_WorkEventPage() { return new global::WorkOrganizer.WorkEventPage(); }
        private object Activate_22_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::WorkOrganizer.Specs.House>(); }
        private object Activate_23_Collection() { return new global::System.Collections.ObjectModel.Collection<global::WorkOrganizer.Specs.House>(); }
        private object Activate_24_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::WorkOrganizer.ComboData>(); }
        private object Activate_25_Collection() { return new global::System.Collections.ObjectModel.Collection<global::WorkOrganizer.ComboData>(); }
        private object Activate_26_ComboData() { return new global::WorkOrganizer.ComboData(); }
        private void VectorAdd_6_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WorkOrganizer.Specs.Owner>)instance;
            var newItem = (global::WorkOrganizer.Specs.Owner)item;
            collection.Add(newItem);
        }
        private void VectorAdd_7_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WorkOrganizer.Specs.Owner>)instance;
            var newItem = (global::WorkOrganizer.Specs.Owner)item;
            collection.Add(newItem);
        }
        private void VectorAdd_22_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WorkOrganizer.Specs.House>)instance;
            var newItem = (global::WorkOrganizer.Specs.House)item;
            collection.Add(newItem);
        }
        private void VectorAdd_23_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WorkOrganizer.Specs.House>)instance;
            var newItem = (global::WorkOrganizer.Specs.House)item;
            collection.Add(newItem);
        }
        private void VectorAdd_24_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WorkOrganizer.ComboData>)instance;
            var newItem = (global::WorkOrganizer.ComboData)item;
            collection.Add(newItem);
        }
        private void VectorAdd_25_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WorkOrganizer.ComboData>)instance;
            var newItem = (global::WorkOrganizer.ComboData)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  WorkOrganizer.ConfigsPage
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_ConfigsPage;
                userType.AddMemberName("CurrentLaundryEuroPerKg");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  String
                xamlType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  WorkOrganizer.HouseManagementPage
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_4_HouseManagementPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  WorkOrganizer.HousePage
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_5_HousePage;
                userType.AddMemberName("ComboDataOwners");
                userType.AddMemberName("HouseOnEdit");
                userType.AddMemberName("IsEdit");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  System.Collections.ObjectModel.ObservableCollection`1<WorkOrganizer.Specs.Owner>
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<WorkOrganizer.Specs.Owner>"));
                userType.CollectionAdd = VectorAdd_6_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  System.Collections.ObjectModel.Collection`1<WorkOrganizer.Specs.Owner>
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_Collection;
                userType.CollectionAdd = VectorAdd_7_Collection;
                xamlType = userType;
                break;

            case 8:   //  Object
                xamlType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  WorkOrganizer.Specs.Owner
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("IdOwner");
                userType.AddMemberName("Name");
                userType.AddMemberName("IsInvisible");
                userType.AddMemberName("Email");
                userType.AddMemberName("DefaultEmailType");
                userType.AddMemberName("Laundry");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  Int32
                xamlType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Boolean
                xamlType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  WorkOrganizer.Specs.House
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("IdHouse");
                userType.AddMemberName("Name");
                userType.AddMemberName("IdOwner");
                userType.AddMemberName("IsInvisible");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  WorkOrganizer.MainPage
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_13_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  WorkOrganizer.OwnerManagementPage
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_14_OwnerManagementPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  WorkOrganizer.OwnerPage
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_15_OwnerPage;
                userType.AddMemberName("CurrentLaundryEuroPerKg");
                userType.AddMemberName("OwnerOnEdit");
                userType.AddMemberName("IsEdit");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  WorkOrganizer.SummaryPage
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_16_SummaryPage;
                userType.AddMemberName("CurrentOwner");
                userType.AddMemberName("CurrentDateTime");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  System.DateTime
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  System.ValueType
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 19:   //  WorkOrganizer.WorkAnalyzerPage
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_19_WorkAnalyzerPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  WorkOrganizer.WorkEventPage
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_20_WorkEventPage;
                userType.AddMemberName("WorkEventOnEdit");
                userType.AddMemberName("IsEdit");
                userType.AddMemberName("ComboDataHouses");
                userType.AddMemberName("ComboDataCheckIn");
                userType.AddMemberName("ComboDataStairs");
                userType.AddMemberName("ComboDataCleaning");
                userType.AddMemberName("ComboDataConstructionCleaning");
                userType.AddMemberName("LaundryPerKg");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  WorkOrganizer.Specs.WorkEvent
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  System.Collections.ObjectModel.ObservableCollection`1<WorkOrganizer.Specs.House>
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<WorkOrganizer.Specs.House>"));
                userType.CollectionAdd = VectorAdd_22_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  System.Collections.ObjectModel.Collection`1<WorkOrganizer.Specs.House>
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_23_Collection;
                userType.CollectionAdd = VectorAdd_23_Collection;
                xamlType = userType;
                break;

            case 24:   //  System.Collections.ObjectModel.ObservableCollection`1<WorkOrganizer.ComboData>
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<WorkOrganizer.ComboData>"));
                userType.CollectionAdd = VectorAdd_24_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  System.Collections.ObjectModel.Collection`1<WorkOrganizer.ComboData>
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_25_Collection;
                userType.CollectionAdd = VectorAdd_25_Collection;
                xamlType = userType;
                break;

            case 26:   //  WorkOrganizer.ComboData
                userType = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_26_ComboData;
                userType.AddMemberName("IndexValue");
                userType.AddMemberName("Value");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_ConfigsPage_CurrentLaundryEuroPerKg(object instance)
        {
            var that = (global::WorkOrganizer.ConfigsPage)instance;
            return that.CurrentLaundryEuroPerKg;
        }
        private object get_1_HousePage_ComboDataOwners(object instance)
        {
            var that = (global::WorkOrganizer.HousePage)instance;
            return that.ComboDataOwners;
        }
        private void set_1_HousePage_ComboDataOwners(object instance, object Value)
        {
            var that = (global::WorkOrganizer.HousePage)instance;
            that.ComboDataOwners = (global::System.Collections.ObjectModel.ObservableCollection<global::WorkOrganizer.Specs.Owner>)Value;
        }
        private object get_2_Owner_IdOwner(object instance)
        {
            var that = (global::WorkOrganizer.Specs.Owner)instance;
            return that.IdOwner;
        }
        private void set_2_Owner_IdOwner(object instance, object Value)
        {
            var that = (global::WorkOrganizer.Specs.Owner)instance;
            that.IdOwner = (global::System.Int32)Value;
        }
        private object get_3_Owner_Name(object instance)
        {
            var that = (global::WorkOrganizer.Specs.Owner)instance;
            return that.Name;
        }
        private object get_4_Owner_IsInvisible(object instance)
        {
            var that = (global::WorkOrganizer.Specs.Owner)instance;
            return that.IsInvisible;
        }
        private void set_4_Owner_IsInvisible(object instance, object Value)
        {
            var that = (global::WorkOrganizer.Specs.Owner)instance;
            that.IsInvisible = (global::System.Boolean)Value;
        }
        private object get_5_Owner_Email(object instance)
        {
            var that = (global::WorkOrganizer.Specs.Owner)instance;
            return that.Email;
        }
        private object get_6_Owner_DefaultEmailType(object instance)
        {
            var that = (global::WorkOrganizer.Specs.Owner)instance;
            return that.DefaultEmailType;
        }
        private object get_7_Owner_Laundry(object instance)
        {
            var that = (global::WorkOrganizer.Specs.Owner)instance;
            return that.Laundry;
        }
        private object get_8_HousePage_HouseOnEdit(object instance)
        {
            var that = (global::WorkOrganizer.HousePage)instance;
            return that.HouseOnEdit;
        }
        private object get_9_HousePage_IsEdit(object instance)
        {
            var that = (global::WorkOrganizer.HousePage)instance;
            return that.IsEdit;
        }
        private object get_10_OwnerPage_CurrentLaundryEuroPerKg(object instance)
        {
            var that = (global::WorkOrganizer.OwnerPage)instance;
            return that.CurrentLaundryEuroPerKg;
        }
        private object get_11_OwnerPage_OwnerOnEdit(object instance)
        {
            var that = (global::WorkOrganizer.OwnerPage)instance;
            return that.OwnerOnEdit;
        }
        private object get_12_OwnerPage_IsEdit(object instance)
        {
            var that = (global::WorkOrganizer.OwnerPage)instance;
            return that.IsEdit;
        }
        private object get_13_SummaryPage_CurrentOwner(object instance)
        {
            var that = (global::WorkOrganizer.SummaryPage)instance;
            return that.CurrentOwner;
        }
        private object get_14_SummaryPage_CurrentDateTime(object instance)
        {
            var that = (global::WorkOrganizer.SummaryPage)instance;
            return that.CurrentDateTime;
        }
        private object get_15_WorkEventPage_WorkEventOnEdit(object instance)
        {
            var that = (global::WorkOrganizer.WorkEventPage)instance;
            return that.WorkEventOnEdit;
        }
        private object get_16_WorkEventPage_IsEdit(object instance)
        {
            var that = (global::WorkOrganizer.WorkEventPage)instance;
            return that.IsEdit;
        }
        private object get_17_WorkEventPage_ComboDataHouses(object instance)
        {
            var that = (global::WorkOrganizer.WorkEventPage)instance;
            return that.ComboDataHouses;
        }
        private void set_17_WorkEventPage_ComboDataHouses(object instance, object Value)
        {
            var that = (global::WorkOrganizer.WorkEventPage)instance;
            that.ComboDataHouses = (global::System.Collections.ObjectModel.ObservableCollection<global::WorkOrganizer.Specs.House>)Value;
        }
        private object get_18_House_IdHouse(object instance)
        {
            var that = (global::WorkOrganizer.Specs.House)instance;
            return that.IdHouse;
        }
        private void set_18_House_IdHouse(object instance, object Value)
        {
            var that = (global::WorkOrganizer.Specs.House)instance;
            that.IdHouse = (global::System.Int32)Value;
        }
        private object get_19_House_Name(object instance)
        {
            var that = (global::WorkOrganizer.Specs.House)instance;
            return that.Name;
        }
        private object get_20_House_IdOwner(object instance)
        {
            var that = (global::WorkOrganizer.Specs.House)instance;
            return that.IdOwner;
        }
        private object get_21_House_IsInvisible(object instance)
        {
            var that = (global::WorkOrganizer.Specs.House)instance;
            return that.IsInvisible;
        }
        private void set_21_House_IsInvisible(object instance, object Value)
        {
            var that = (global::WorkOrganizer.Specs.House)instance;
            that.IsInvisible = (global::System.Boolean)Value;
        }
        private object get_22_WorkEventPage_ComboDataCheckIn(object instance)
        {
            var that = (global::WorkOrganizer.WorkEventPage)instance;
            return that.ComboDataCheckIn;
        }
        private void set_22_WorkEventPage_ComboDataCheckIn(object instance, object Value)
        {
            var that = (global::WorkOrganizer.WorkEventPage)instance;
            that.ComboDataCheckIn = (global::System.Collections.ObjectModel.ObservableCollection<global::WorkOrganizer.ComboData>)Value;
        }
        private object get_23_ComboData_IndexValue(object instance)
        {
            var that = (global::WorkOrganizer.ComboData)instance;
            return that.IndexValue;
        }
        private void set_23_ComboData_IndexValue(object instance, object Value)
        {
            var that = (global::WorkOrganizer.ComboData)instance;
            that.IndexValue = (global::System.Int32)Value;
        }
        private object get_24_ComboData_Value(object instance)
        {
            var that = (global::WorkOrganizer.ComboData)instance;
            return that.Value;
        }
        private void set_24_ComboData_Value(object instance, object Value)
        {
            var that = (global::WorkOrganizer.ComboData)instance;
            that.Value = (global::System.String)Value;
        }
        private object get_25_WorkEventPage_ComboDataStairs(object instance)
        {
            var that = (global::WorkOrganizer.WorkEventPage)instance;
            return that.ComboDataStairs;
        }
        private void set_25_WorkEventPage_ComboDataStairs(object instance, object Value)
        {
            var that = (global::WorkOrganizer.WorkEventPage)instance;
            that.ComboDataStairs = (global::System.Collections.ObjectModel.ObservableCollection<global::WorkOrganizer.ComboData>)Value;
        }
        private object get_26_WorkEventPage_ComboDataCleaning(object instance)
        {
            var that = (global::WorkOrganizer.WorkEventPage)instance;
            return that.ComboDataCleaning;
        }
        private void set_26_WorkEventPage_ComboDataCleaning(object instance, object Value)
        {
            var that = (global::WorkOrganizer.WorkEventPage)instance;
            that.ComboDataCleaning = (global::System.Collections.ObjectModel.ObservableCollection<global::WorkOrganizer.ComboData>)Value;
        }
        private object get_27_WorkEventPage_ComboDataConstructionCleaning(object instance)
        {
            var that = (global::WorkOrganizer.WorkEventPage)instance;
            return that.ComboDataConstructionCleaning;
        }
        private void set_27_WorkEventPage_ComboDataConstructionCleaning(object instance, object Value)
        {
            var that = (global::WorkOrganizer.WorkEventPage)instance;
            that.ComboDataConstructionCleaning = (global::System.Collections.ObjectModel.ObservableCollection<global::WorkOrganizer.ComboData>)Value;
        }
        private object get_28_WorkEventPage_LaundryPerKg(object instance)
        {
            var that = (global::WorkOrganizer.WorkEventPage)instance;
            return that.LaundryPerKg;
        }
        private void set_28_WorkEventPage_LaundryPerKg(object instance, object Value)
        {
            var that = (global::WorkOrganizer.WorkEventPage)instance;
            that.LaundryPerKg = (global::System.String)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember xamlMember = null;
            global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "WorkOrganizer.ConfigsPage.CurrentLaundryEuroPerKg":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.ConfigsPage");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "CurrentLaundryEuroPerKg", "String");
                xamlMember.Getter = get_0_ConfigsPage_CurrentLaundryEuroPerKg;
                xamlMember.SetIsReadOnly();
                break;
            case "WorkOrganizer.HousePage.ComboDataOwners":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.HousePage");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ComboDataOwners", "System.Collections.ObjectModel.ObservableCollection`1<WorkOrganizer.Specs.Owner>");
                xamlMember.Getter = get_1_HousePage_ComboDataOwners;
                xamlMember.Setter = set_1_HousePage_ComboDataOwners;
                break;
            case "WorkOrganizer.Specs.Owner.IdOwner":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.Specs.Owner");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "IdOwner", "Int32");
                xamlMember.Getter = get_2_Owner_IdOwner;
                xamlMember.Setter = set_2_Owner_IdOwner;
                break;
            case "WorkOrganizer.Specs.Owner.Name":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.Specs.Owner");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_3_Owner_Name;
                xamlMember.SetIsReadOnly();
                break;
            case "WorkOrganizer.Specs.Owner.IsInvisible":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.Specs.Owner");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "IsInvisible", "Boolean");
                xamlMember.Getter = get_4_Owner_IsInvisible;
                xamlMember.Setter = set_4_Owner_IsInvisible;
                break;
            case "WorkOrganizer.Specs.Owner.Email":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.Specs.Owner");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Email", "String");
                xamlMember.Getter = get_5_Owner_Email;
                xamlMember.SetIsReadOnly();
                break;
            case "WorkOrganizer.Specs.Owner.DefaultEmailType":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.Specs.Owner");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "DefaultEmailType", "String");
                xamlMember.Getter = get_6_Owner_DefaultEmailType;
                xamlMember.SetIsReadOnly();
                break;
            case "WorkOrganizer.Specs.Owner.Laundry":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.Specs.Owner");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Laundry", "String");
                xamlMember.Getter = get_7_Owner_Laundry;
                xamlMember.SetIsReadOnly();
                break;
            case "WorkOrganizer.HousePage.HouseOnEdit":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.HousePage");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "HouseOnEdit", "WorkOrganizer.Specs.House");
                xamlMember.Getter = get_8_HousePage_HouseOnEdit;
                xamlMember.SetIsReadOnly();
                break;
            case "WorkOrganizer.HousePage.IsEdit":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.HousePage");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "IsEdit", "Boolean");
                xamlMember.Getter = get_9_HousePage_IsEdit;
                xamlMember.SetIsReadOnly();
                break;
            case "WorkOrganizer.OwnerPage.CurrentLaundryEuroPerKg":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.OwnerPage");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "CurrentLaundryEuroPerKg", "String");
                xamlMember.Getter = get_10_OwnerPage_CurrentLaundryEuroPerKg;
                xamlMember.SetIsReadOnly();
                break;
            case "WorkOrganizer.OwnerPage.OwnerOnEdit":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.OwnerPage");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "OwnerOnEdit", "WorkOrganizer.Specs.Owner");
                xamlMember.Getter = get_11_OwnerPage_OwnerOnEdit;
                xamlMember.SetIsReadOnly();
                break;
            case "WorkOrganizer.OwnerPage.IsEdit":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.OwnerPage");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "IsEdit", "Boolean");
                xamlMember.Getter = get_12_OwnerPage_IsEdit;
                xamlMember.SetIsReadOnly();
                break;
            case "WorkOrganizer.SummaryPage.CurrentOwner":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.SummaryPage");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "CurrentOwner", "WorkOrganizer.Specs.Owner");
                xamlMember.Getter = get_13_SummaryPage_CurrentOwner;
                xamlMember.SetIsReadOnly();
                break;
            case "WorkOrganizer.SummaryPage.CurrentDateTime":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.SummaryPage");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "CurrentDateTime", "System.DateTime");
                xamlMember.Getter = get_14_SummaryPage_CurrentDateTime;
                xamlMember.SetIsReadOnly();
                break;
            case "WorkOrganizer.WorkEventPage.WorkEventOnEdit":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.WorkEventPage");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "WorkEventOnEdit", "WorkOrganizer.Specs.WorkEvent");
                xamlMember.Getter = get_15_WorkEventPage_WorkEventOnEdit;
                xamlMember.SetIsReadOnly();
                break;
            case "WorkOrganizer.WorkEventPage.IsEdit":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.WorkEventPage");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "IsEdit", "Boolean");
                xamlMember.Getter = get_16_WorkEventPage_IsEdit;
                xamlMember.SetIsReadOnly();
                break;
            case "WorkOrganizer.WorkEventPage.ComboDataHouses":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.WorkEventPage");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ComboDataHouses", "System.Collections.ObjectModel.ObservableCollection`1<WorkOrganizer.Specs.House>");
                xamlMember.Getter = get_17_WorkEventPage_ComboDataHouses;
                xamlMember.Setter = set_17_WorkEventPage_ComboDataHouses;
                break;
            case "WorkOrganizer.Specs.House.IdHouse":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.Specs.House");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "IdHouse", "Int32");
                xamlMember.Getter = get_18_House_IdHouse;
                xamlMember.Setter = set_18_House_IdHouse;
                break;
            case "WorkOrganizer.Specs.House.Name":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.Specs.House");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_19_House_Name;
                xamlMember.SetIsReadOnly();
                break;
            case "WorkOrganizer.Specs.House.IdOwner":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.Specs.House");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "IdOwner", "Int32");
                xamlMember.Getter = get_20_House_IdOwner;
                xamlMember.SetIsReadOnly();
                break;
            case "WorkOrganizer.Specs.House.IsInvisible":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.Specs.House");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "IsInvisible", "Boolean");
                xamlMember.Getter = get_21_House_IsInvisible;
                xamlMember.Setter = set_21_House_IsInvisible;
                break;
            case "WorkOrganizer.WorkEventPage.ComboDataCheckIn":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.WorkEventPage");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ComboDataCheckIn", "System.Collections.ObjectModel.ObservableCollection`1<WorkOrganizer.ComboData>");
                xamlMember.Getter = get_22_WorkEventPage_ComboDataCheckIn;
                xamlMember.Setter = set_22_WorkEventPage_ComboDataCheckIn;
                break;
            case "WorkOrganizer.ComboData.IndexValue":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.ComboData");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "IndexValue", "Int32");
                xamlMember.Getter = get_23_ComboData_IndexValue;
                xamlMember.Setter = set_23_ComboData_IndexValue;
                break;
            case "WorkOrganizer.ComboData.Value":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.ComboData");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Value", "String");
                xamlMember.Getter = get_24_ComboData_Value;
                xamlMember.Setter = set_24_ComboData_Value;
                break;
            case "WorkOrganizer.WorkEventPage.ComboDataStairs":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.WorkEventPage");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ComboDataStairs", "System.Collections.ObjectModel.ObservableCollection`1<WorkOrganizer.ComboData>");
                xamlMember.Getter = get_25_WorkEventPage_ComboDataStairs;
                xamlMember.Setter = set_25_WorkEventPage_ComboDataStairs;
                break;
            case "WorkOrganizer.WorkEventPage.ComboDataCleaning":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.WorkEventPage");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ComboDataCleaning", "System.Collections.ObjectModel.ObservableCollection`1<WorkOrganizer.ComboData>");
                xamlMember.Getter = get_26_WorkEventPage_ComboDataCleaning;
                xamlMember.Setter = set_26_WorkEventPage_ComboDataCleaning;
                break;
            case "WorkOrganizer.WorkEventPage.ComboDataConstructionCleaning":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.WorkEventPage");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ComboDataConstructionCleaning", "System.Collections.ObjectModel.ObservableCollection`1<WorkOrganizer.ComboData>");
                xamlMember.Getter = get_27_WorkEventPage_ComboDataConstructionCleaning;
                xamlMember.Setter = set_27_WorkEventPage_ComboDataConstructionCleaning;
                break;
            case "WorkOrganizer.WorkEventPage.LaundryPerKg":
                userType = (global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WorkOrganizer.WorkEventPage");
                xamlMember = new global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlMember(this, "LaundryPerKg", "String");
                xamlMember.Getter = get_28_WorkEventPage_LaundryPerKg;
                xamlMember.Setter = set_28_WorkEventPage_LaundryPerKg;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType
    {
        global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::WorkOrganizer.WorkOrganizer_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


